"src/import.ml": package(camlp4.macro)
# OASIS_START
# DO NOT EDIT (digest: 3076b60798c8819bf9b904a70da0fe0d)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library incremental_lib
"src/incremental_lib.cmxs": use_incremental_lib
"src/adjust_heights_heap.cmx": for-pack(Incremental_lib)
"src/alarm.cmx": for-pack(Incremental_lib)
"src/alarm_value.cmx": for-pack(Incremental_lib)
"src/array_fold.cmx": for-pack(Incremental_lib)
"src/at.cmx": for-pack(Incremental_lib)
"src/at_intervals.cmx": for-pack(Incremental_lib)
"src/before_or_after.cmx": for-pack(Incremental_lib)
"src/bind.cmx": for-pack(Incremental_lib)
"src/cutoff.cmx": for-pack(Incremental_lib)
"src/freeze.cmx": for-pack(Incremental_lib)
"src/if_then_else.cmx": for-pack(Incremental_lib)
"src/import.cmx": for-pack(Incremental_lib)
"src/incremental.cmx": for-pack(Incremental_lib)
"src/incremental_intf.cmx": for-pack(Incremental_lib)
"src/incremental_unit_tests.cmx": for-pack(Incremental_lib)
"src/internal_observer.cmx": for-pack(Incremental_lib)
"src/join.cmx": for-pack(Incremental_lib)
"src/kind.cmx": for-pack(Incremental_lib)
"src/node.cmx": for-pack(Incremental_lib)
"src/node_id.cmx": for-pack(Incremental_lib)
"src/observer.cmx": for-pack(Incremental_lib)
"src/on_update_handler.cmx": for-pack(Incremental_lib)
"src/raised_exn.cmx": for-pack(Incremental_lib)
"src/recompute_heap.cmx": for-pack(Incremental_lib)
"src/scope.cmx": for-pack(Incremental_lib)
"src/sexp_of.cmx": for-pack(Incremental_lib)
"src/should_not_use.cmx": for-pack(Incremental_lib)
"src/snapshot.cmx": for-pack(Incremental_lib)
"src/stabilization_num.cmx": for-pack(Incremental_lib)
"src/state.cmx": for-pack(Incremental_lib)
"src/std.cmx": for-pack(Incremental_lib)
"src/step_function.cmx": for-pack(Incremental_lib)
"src/types.cmx": for-pack(Incremental_lib)
"src/unordered_array_fold.cmx": for-pack(Incremental_lib)
"src/uopt.cmx": for-pack(Incremental_lib)
"src/var.cmx": for-pack(Incremental_lib)
<src/*.ml{,i,y}>: package(core)
<src/*.ml{,i,y}>: package(fieldslib)
<src/*.ml{,i,y}>: package(fieldslib.syntax)
<src/*.ml{,i,y}>: package(pa_ounit.syntax)
<src/*.ml{,i,y}>: package(pa_test.syntax)
<src/*.ml{,i,y}>: package(sexplib)
<src/*.ml{,i,y}>: package(sexplib.syntax)
<src/*.ml{,i,y}>: package(threads)
# Library incremental_bench_lib
"bench/lib/incremental_bench_lib.cmxs": use_incremental_bench_lib
"bench/lib/bench.cmx": for-pack(Incremental_bench_lib)
"bench/lib/import.cmx": for-pack(Incremental_bench_lib)
<bench/lib/*.ml{,i,y}>: package(core)
<bench/lib/*.ml{,i,y}>: package(fieldslib)
<bench/lib/*.ml{,i,y}>: package(fieldslib.syntax)
<bench/lib/*.ml{,i,y}>: package(pa_ounit.syntax)
<bench/lib/*.ml{,i,y}>: package(pa_test.syntax)
<bench/lib/*.ml{,i,y}>: package(sexplib)
<bench/lib/*.ml{,i,y}>: package(sexplib.syntax)
<bench/lib/*.ml{,i,y}>: package(threads)
<bench/lib/*.ml{,i,y}>: use_incremental_lib
# Executable incremental_bench
<bench/bin/bench.{native,byte}>: package(core)
<bench/bin/bench.{native,byte}>: package(fieldslib)
<bench/bin/bench.{native,byte}>: package(fieldslib.syntax)
<bench/bin/bench.{native,byte}>: package(pa_ounit.syntax)
<bench/bin/bench.{native,byte}>: package(pa_test.syntax)
<bench/bin/bench.{native,byte}>: package(sexplib)
<bench/bin/bench.{native,byte}>: package(sexplib.syntax)
<bench/bin/bench.{native,byte}>: package(threads)
<bench/bin/bench.{native,byte}>: use_incremental_bench_lib
<bench/bin/bench.{native,byte}>: use_incremental_lib
<bench/bin/*.ml{,i,y}>: package(core)
<bench/bin/*.ml{,i,y}>: package(fieldslib)
<bench/bin/*.ml{,i,y}>: package(fieldslib.syntax)
<bench/bin/*.ml{,i,y}>: package(pa_ounit.syntax)
<bench/bin/*.ml{,i,y}>: package(pa_test.syntax)
<bench/bin/*.ml{,i,y}>: package(sexplib)
<bench/bin/*.ml{,i,y}>: package(sexplib.syntax)
<bench/bin/*.ml{,i,y}>: package(threads)
<bench/bin/*.ml{,i,y}>: use_incremental_bench_lib
<bench/bin/*.ml{,i,y}>: use_incremental_lib
# OASIS_STOP
